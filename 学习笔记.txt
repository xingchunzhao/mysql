(1)mysql入门语句
1.先建立数据服务器
2.建立数据库
3.建立表，声明列
mysql连接：
mysql -h loalhost -u root -p
mysql -uroot -p
查看数据库：show databases;
创建数据库：create database python
选择数据库：use python
删除数据库：drop database test;
查看表：show tables;
创建表：
create table class(
id int,
name varchar(10),
age int
);
表重命名：rename table class to newclass;
删除表：drop table newclass;
查看表结构：desc stu;
练习：
制作留言表：
create table msg(
id int,
title varchar(60),
name varchar(10),
content varchar(1000)
);
不能修改数据库的名字！！！！！！！！！！

！！！！解决字符集问题！！！！
默认建表一般用utf-8
set names gdk;

(2)insert, delete, update, select操作
插入表：
insert into msg
(id ,title, name, content)
values
(1,'初来咋到', '张三', '我是老大！！！');

insert into msg
(id ,title, name, content)
values
(3,'3标题', '刘备', '我又来了~~~'),
(4,'4标题', '关羽', '我又来了~~~'),
(5,'5标题', '张飞', '我又来了~~~');

更新表：
update msg 
set id = 2,
content = '我才是最帅的'
where
name = '李四';
update msg 
set id = 2
where
name = '李四';

删除表数据：
delete from msg
where id = 5;

查询表格
查询表全部内容：
select * from msg;
指定查询部分列
select id, title from msg;
指定查询部分行：
select name, content from msg 
where id > 2;

增加列：
alter table msg add age tinyint(1);
alter table msg add age tinyint not null default 0;

(3)数据类型
1.所谓建表，就是声明列的过程
2.选列的原则是够用就好
3.列的类型：数值型，字符型，时期/时间型
4.整型：Tinyint(1个字节：0~255),
Smallint(2个字节：0~65535),Mediumint(2个字节：0~2),
Int(4个字节：32位),bigint()
默认是有符号的。
整型列的可选属性
tinyint(M), unsigned, zerofill
tinyint(M):
M：宽度（在0填充的时候才有意义），不影响数据
unsigned:无符号类型（非负）
zerofill:0填充（默认无符号 unsigned ）
列的默认值：！！！！！！
Not null default 0

(4)字符型:char, varchar, test(文本串)
char:定长， char(M),M代表可容纳的字符数，不是字节数
varchar:变长, varchar(M),M代表可容纳的字符数，不是字节数
区别：
定长：M个字符，如果存在小于M个字符，实占M个字符，实占空间M，利用率<=100% 0<= M <=255
如果不够M个字符，内部用空格补齐，取出的时候会丢失空格。
变长：只有N<M个字符，实占N个字符, 占用空间N+(1~2)，利用率 N/(N+(1~2)) < 100%, 0 <= M <=65535
速度上，定长快些。
char,varchar选择原则
1.空间利用效益：个人简历，微博，选择的是varchar
2.速度：用户名：char

(5)时间/日期类型
create table y(
ya year(4)
);

年类型 -->year 
1个字节 表示 1901-2155,[0000],表示错误时的选择
如果输入2位，'00~69'表示2000~2069，'70~99'表示1970~1999
#日期类型：date
典型格式 1992-08-12
日期类型：'1000-01-01'
create table d(
title varchar(10)
dt date
)charset utf8;
时间类型：tiem
典型格式：hh:mm:ss
时间类型：'-838:59:59' ~'+838:59:59'
create table t(
tm date
)charset utf8;

日期时间类型：datetime类型：
典型格式：1989-05-06 14:15:255
日期时间类型：1001-01-01 00:00:00 ~ 9999-12-31 23:59:59

注意：在开发中，很少用日期事件类型来表示一个需要精确到秒的列。
原因：虽然日期时间类型能精确到秒，而且方便查看，但计算不方便
使用时间戳表示。
时间戳：
是1970-01-01 00:00:00 到当前的秒数
一般存注册时间，商品发布会时间等，并不是用datetime存储，而是时间戳 
用int型存储时间戳，方便计算，对于显示来说，也可以方便格式化
面试问题：

（6）增删改详细解读：
insert into tableName ('列名') values ('内容')；
delete from tableName where id = 5;
update tableName set 列名 = 新值 where id = 5;
(7)查
select * from tableName while id > 3;

！！！！！！！！！！
（8）查询的5种语句
！！！！！！！！！！
where 详解
>, <, =, !=, <>, >=, <=, in(值1，值2，...，值N) 等于1~N任意一个，都行, 
betwwen 值1 and 值2，表示在值1，值2之间(包括值1，值2),
not 不属于
not in 不在里面
OR (||)
and (&&)
模糊查询：
like 像
% 通配任意字符
'_' 通配单一字符

group by 详解:max,min,sum,avg, count,
常用于统计的场合
语法：group by clo1,clo2,...,cloN
查询每个栏目最贵的商品价格
select cat_id, max(shop_price) from goods group by cat_id;
查询所有栏目积压的货款
select cat_id sum(shop_price*goods_nnumber) from goods group by cat_id;

having 详解:对结果的进一步筛选
#查询出本店价格比市场价格低多少钱，并且把低于200元以上的商品选择出来
select goods_id, goods_name, cat_id, market_price - goods_price as shen from goods where cat_id = 3 having shen >= 200;
#查询积压货款超过2W的栏目，以及该栏目积压的获取
elect cat_id sum(shop_price*goods_nnumber) as hk from goods group by cat_id having hk > 20000;
#查询两门或者两门以上不及格的同学的平均分
#要求只见一次select语句
select name, avg(score), sum(score < 60) as gk  from std group by name having gk >= 2;

(9) order by语句详解：排序00
#可以根据字段来排序
#可以升序排列，也可以降序排列，默认是升序排列
#升序，可以用字段名'asc'来声明排列
select goods_id, goods_name, shop_price from goods cat_id = 3 order by shop_price;
#降序，可以用字段名'desc'来声明排列
select goods_id, goods_name, shop_price from goods cat_id = 3 order by shop_price desc;

select id, name from msg order by name;

#order by 可以按照多字段来排序
etc：order by 列1 [desc/asc], 列2[desc/asc]
#按发布时间排序，由早到晚排序
add_time
select goods_id, goods_name, add_time from goods order by add_time asc;

limit:在语句的最后，起到限制条码的作用
limit[offest,][N]
offest:偏移量,可选，如果不选，则相当于limit 0,N 
N：取出条目
#取价格最高的三个商品
select goods_id, goods_name, shop_price from goods oreder by shop_price;
#取出价格第四到第六的商品
select goods_id, goods_name, shop_price from goods oreder by shop_price limit 3,3;

#五个字句是有顺序要求的：where, group by, having, order by, limit !!!!!!!!!!!!!!!!!!
#取出每个栏目下的最贵的商品
建立一张临时表保持排序的结果
create table g2 like goods;
insert into g2 select * from goods order ya cat_id, shop_price desc;
 
select * from (select goods_id, goods_name, cat_id, shop_price from order ya cat_id, shop_price desc) as tmp group by cat_id;

良好的理解模型
1.where 表达式，把表达式放在行中看表达式是否为真
2.列：理解成变量，可以运算
3.取出结果可以理解成一张临时表

！！！！！！！！！！！！！！！！！！！！！！！！！
子查询：where型子查询,from型子查询,exists型子查询
！！！！！！！！！！！！！！！！！！！！！！！！！

where型子查询：
#把内层查询的结果作为外层查询的比较条件

#要求查询最新的商品（以id最大为最新）
select goods_id,goods_name from goods order by goods_id limit 1;
#!!!
select max(goods_id) from goods;
select goods_id,goods_name form goods where goods_id = (select max(goods_id) from goods);

from型子查询：把内存查询结果当成临时表，供外层sql再次查询
#用from型子查询查询出每个栏目最新的商品
select * from (select goods_id, goods_name from goods order by cat_id, goods_id desc) as tmp group by cat_id;

#思考：如何用子查询查出挂科两门及两门以上的同学的平均分
$先把挂科2门及2门以上的同学找出来
select name from (select name, count(*) as gk from stu where score < 60 group by name having gk >= 2) as tmp;
select name avg(score) from stu where name in (select * from (select goods_id, goods_name from goods order by cat_id, goods_id desc) as tmp group by cat_id) group by name;

exists 型子查询:把外层的查询结果拿到内层，看内层的查询是否成立
#查有商品的栏目
select cat_id,cat_name from category where exists (select * from goods.cat_id = category.cat_id);

（10）union的用：合并查询结果,连接查询
作用：把两次或者多次的查询结果合并起来
#把>5000元或者<20的商品筛选出来
select goods_id, goods_name from goods shop_price > 5000 or shop_price < 20;
select goods_id, goods_name from goods shop_price > 5000 
union
select goods_id, goods_name from goods shop_price < 20;

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
要求：两次查询的列数一致
推荐：查询的每一列相对应的列类型也一致
可以来至于多张表
多次sql语句取出的列名可以不一致，此时以第一个sql的列名为准
如果不同的语句取出的行，有完全相同（每个列的值都相同）
那么相同的行将会合并（去重复）
如果不去重复，可以加all来指定
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#合并两张表
select id, sum(num) from (select * from ta union all select * from tb) as tmp group by id;

#想取第四个栏目的商品，价格降序排列
#还想取第五个栏目的商品，价格也是降序排列
！！！！！！！！！！！！！！！！！！！！！！！
如果字句中有order by，limit，需加()
推荐放到所有字句之后，既--对最终合并后的结果来排序
！！！！！！！！！！！！！！！！！！！！！！！
#取第三个栏目，价格前三高的商品
#同时取第四个栏目，价格前两高的商品

(select goods_id, goods_name, shop_price from goods where cat_id = 3 order by shop_price desc limit 3)
union all
(select goods_id, goods_name, shop_price from goods where cat_id = 4 order by shop_price desc limit 2)

！！！！！！！！！！！！！！！！！！！
在字句中orde by配合limit使用更有效果
如果order by 不配合limit使用会被语法分析器优化时去掉
！！！！！！！！！！！！！！！！！！！

（11）连接查询：左连接，右连接，内连接
左连接：
1.接上表
2.连接条件
！！！！！！！！！！！！！！！！！
左连接语法：
select 列1，列2，...，列N 
from
tableNameA left join tableNameB
on tableNameA.列 = tableNameB.列 
where, having,.....照常写
！！！！！！！！！！！！！！！！！！

select 
goods_id, goods.cat_id, cat_name, goods_name, shop_price
from
goods left join category
on goods.cat_id = category.cat_id 

右连接：rigth
！！！！！！！！！！！！！！！！！
右连接语法：
select 列1，列2，...，列N 
from
tableNameA right join tableNameB
on tableNameA.列 = tableNameB.列
where, having,..... 照常写
！！！！！！！！！！！！！！！！！！

内连接：inner

！！！！！！！！！！！！！！！！！
内连接语法：
select 列1，列2，...，列N 
from
tableNameA inner join tableNameB
on tableNameA.列 = tableNameB.列
where, having,..... 照常写
！！！！！！！！！！！！！！！！！！

！！！！！！！！！！！！！！！！
左连接，右连接，内连接的区别
左右连接：以左表为准，去右表找匹配数据，找不到匹配用NULL补齐
A站在B的左表 ==> B站在A的右边
A left join B ==> B right join A
1.左右连接可以相互转换
2.推荐可以把右连接转换为左连接来使用

内连接：inner
查询左右表都有的数据，即不要左右连接中NULL的部分
内连接是左右连接的交集
#思考，查出左右连接的并集
答：目前不能，目前的mysql不支持外连接，outer join
可以用union来完成
！！！！！！！！！！！！！！！！
练习：
1.三表联查，取出goods表, category表, brand表，3表连接查询得出以下字段
goods_id, goods_name, goods.cat_id, cat_name, goods.brand_id, brand_name

select goods_id, goods_name, goods.cat_id, cat_name, goods.brand_id, brand_name
from
goods left join category on
goods.cat_id = category.cat_id
left join on
brand.brand_id = goods.brand_id;  

2.根据给出的表结构按要求写出sql语句
match 赛程表

字段名                字段类型             描述
metchID                  int               主键
hostTeamID               int               主队ID
guestTeamID              int               客队ID
metchResult              varchar(20)       比赛结果，如(2:0)
metchTime                datatime          比赛开始时间

Team参赛队伍
字段名                 字段类型             描述
teamID                   int                主键
teamName                 int                 队伍名称
要求：Metch 的 hostTeamID与guestTeamID都与Team中的teamID关了
查出2006-1-1 到 2006-7-1之间举行的所有比赛，并且用以下形式列出
如：拜仁 2：0 不莱梅 2006-6-21
create table m(
	mid int primary key auto_increment,
	hid int,
	gid int,
	mresult varchar(10),
	mtime date	
)charset utf8;

insert into m
(mid, hid, gid, mresult, mtime)
values
(1, 1, 2, '2:0', '2006-05-21'),
(2, 2, 3, '1:2', '2006-06-21'),
(3, 3, 1, '2:5', '2006-06-25'),
(4, 2, 1, '3:2', '2006-07-21');

create table t(
tid int,
tname varchar(10)
)charset utf8;

insert into t
(tid, tname)
values
(1, '国安'),
(2, '申花'),
(3, '传智联队');

select hid, t1.tname, mresult , gid, t2.tname, mtime
from 
m left join t as t1
on m.hid = t1.tid
left join t as t2
on m.gid = t2.tid
where mtime between '2006-06-01' and '2006-07-01'; 
！！！！！！！！！！！！！！！！！！！！！！！

(12)表的列管理：表增加列，修改列，删除列
增加列：alter table tableName add tableNameA 列类型;
etc: alter table boy add heigth tinyint unsigned not null default 149;
增加的列默认在表的最后一列
可以用after新增的列在那一列后边
alter table 表名 add 新表名 列类型 after 列名
声明的列在第一列是需要加上first
alter table stu city varchar(10) first;

修改列：
alter table 表名 change 需要修改的列名 修改后的列名 列类型;
alter table stu change height height varchar(20);

删除列：
alter table 表名 drop 列名;

